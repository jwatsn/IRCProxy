#!/usr/bin/env node

var net = require('net');

var argv = require('optimist')
			.usage('proxy')
			.demand('lport')
			.describe('lport','port to listen for connections on.')
			.demand('rhost')
			.describe('rhost','address to forward the connection to.').argv


function initSocketCallbacks(state,s1,s2) {

	function flushSocket1Buffer() {
		if(state.s1Buffer.length > 0) {
			s1.write(Buffer.concat(state.s1Buffer));
		}
		state.s1Buffer = null;
	};

	function flushSocket2Buffer() {
		if(state.s2Buffer.length > 0) {
			s2.write(Buffer.concat(state.s2Buffer));
		}
		state.s2Buffer = null;
	};

	s1.on('close', function(had_error) {
		s2.end();
	});

	s2.on('close', function() {
		s1.end();
	});

	s2.on('error', function (e) {
		console.log('s2 error');
		console.log(e);
		s2.end();
		s1.end();
	});

	s1.on('error', function (e) {
		console.log('s1 error');
		console.log(e);
		s2.end();
		s1.end();
	});

	s1.on('connect', function() {
		state.s1Ready = true;
		flushSocket1Buffer();
	});

	s2.on('connect', function () {
		state.s2Ready = true;
		flushSocket2Buffer();
	});

	s1.on('data', function(data) {

		if(!state.s2Ready) {
			state.s2Buffer.push(data);
		} else {
			s2.write(data);
		}
	});

	s2.on('data', function(data) {
		if(!state.s1Ready) {
			state.s1Buffer.push(data);
		} else {
			s1.write(data);			
		}
	});
}

function proxy() {
	var server = net.createServer(function(s1) {
		
		var addr_port = argv.rhost.split(':');
		var s2 = net.connect(addr_port[1],addr_port[0]);
		
		var state = {
			s1Ready : false,
			s2Ready : false,
			s2Buffer: [],
			s1Buffer : []
		};
		initSocketCallbacks(state,s1,s2);
	});
	server.listen(argv.lport);
}

console.log("starting server...")
proxy();
